<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
    <title>Azuretorial - Docker</title>
    <!-- Favicon-->
    <link rel="icon" type="image/x-icon" href="/assets/favicon.ico" />
    <!-- Core theme CSS (includes Bootstrap)-->
    <link href="/css/styles.css" rel="stylesheet" />
    <style>
        .content-col{
            border: 1px solid #212529;
        }
    </style>
</head>
<body>
<!-- Responsive navbar-->
<nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container">
        <a class="navbar-brand" href="/">Azuretorial</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation"><span class="navbar-toggler-icon"></span></button>
        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav ms-auto mb-2 mb-lg-0">
                <li class="nav-item"><a class="nav-link" aria-current="page" href="/">Home</a></li>
                <li class="nav-item"><a class="nav-link" href="/tutorial/">Tutorial</a></li>
                <li class="nav-item dropdown">
                    <a class="nav-link active dropdown-toggle" id="navbarDropdown" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">Tools</a>
                    <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="navbarDropdown">
                        <li><a class="dropdown-item" href="/tools/git/">Git</a></li>
                        <li><a class="dropdown-item" href="/tools/docker/">Docker</a></li>
                        <li><hr class="dropdown-divider" /></li>
                        <li><a class="dropdown-item" href="/tools/linux/">Linux Commands</a></li>
                        <li><a class="dropdown-item" href="/tools/vi/">Vi Editor</a></li>
                    </ul>
                </li>
                 <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" id="navbarDropdown" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">Calculator Tutorial</a>
                            <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="navbarDropdown">
                                <li><a class="dropdown-item" href="/CalculatorTutorial/TutorialArticle1/">Pylint and Python</a></li>
                                <li><a class="dropdown-item" href="/CalculatorTutorial/TutorialArticle2/">AAA Testing</a></li>
                                <li><hr class="dropdown-divider" /></li>
                                <li><a class="dropdown-item" href="/CalculatorTutorial/TutorialArticle3/">All about OOPs</a></li>
                                <li><a class="dropdown-item" href="/CalculatorTutorial/TutorialArticle4/">SOLID Programming</a></li>
                            </ul>
                 </li>
            </ul>
        </div>
    </div>
</nav>
<!-- Page content-->
<div class="container">
    <div class="row justify-content-between">
        <div class="col">
            <div class="mt-5">
                <h1>Tools: Docker</h1>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-3 content-col rounded mt-2">
            <p class="lead">Content<br>
                <a href="#solid">SOLID principles and calculators</a><br>
            </p>   
        </div>
    </div>
    <div class="row">
        <div class="col">
            <h1 id="solid">What does solid stand for and where is each letter shown</h1>
            <p class="lead">  SOLID is actually an acronym for the first five principles of object oriented design. These are the : S-ingle responsibility Principle, O-pen closed Principle, 
            L-iskov Substitution Principle, I-nterface Segregation Principle, and the D-ependency Inversion Principle." 

</p>

            <h2>Single-responsibility Principle (SRP)</h2>
            
            <p class="lead">Single-responsibility Principle (SRP) states:
            A class should have one and only one reason to change, meaning that a class should have only one job. We see this in simple methods such as addition only adding two variables 
            and even complex methods such as sample_mean keeping scope in check and only returning the final division statement after all the other work is done so the method can be easily called upon. 
 </p>
            
            <h2>Open-closed Principle</h2>
            
            <p class="lead">The next principle, Open-closed Principle, entails that objects or entities should be open for extension but closed for modification. The Mean method shows up once again in this regard.
            Throughout the program there’s not a single line of code CHANGING what the object created is and does, only the samplemean.py file EXTENDING what the object entails and adding on to its functions </p>
            
            <h2>Liskov Substitution Principle</h2>
            
            <p class="lead">After that the Liskov Substitution Principle states that every subclass or derived class should be substitutable for their base or parent class. The getsample method helps us understand this principle.
            When called in the samplemean file, it takes the same variables as it originally did in the get sample file which are data and sample_size. This ensures that the method complies with the same rules of the return values 
            of the superclass. Because of this this subclass can substitute for its superclass thus abiding by this principle. 
 </p>
            
            <h2>Interface segregation principle</h2>
            
            <p class="lead">A client should never be forced to implement an interface that it doesn’t use, or clients shouldn’t be forced to depend on methods they do not use. 
            We can see this when a user wants to find the sample mean they don’t have to use the subtraction method as subtraction isn’t used normally in sample mean calculations
            so variables and methods from a class about subtraction shouldn’t be needed either.  </p>
            
            <h2>Dependency inversion principle</h2>
            
            <p class="lead">Entities must depend on abstractions, not on concretions. It states that the high-level module must not depend on the low-level module, but they should depend on abstractions.
            The <kbd>getSample</kbd> method is a shining example of this as it wraps information while not entangling higher and lower level modules in the wrong way. 
 </p>
            
            

     </div>
</div>
     
    
    
    
    
    
</div>

<!-- Bootstrap core JS-->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/js/bootstrap.bundle.min.js"></script>
<!-- Core theme JS-->
<script src="/js/scripts.js"></script>
</body>
</html>
